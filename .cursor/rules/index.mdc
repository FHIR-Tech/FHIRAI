# FHIRAI - Cursor AI Project Index

## 🏗️ Project Overview
**FHIRAI** - Clean Architecture ASP.NET Core app with CQRS, PostgreSQL, Azure deployment. Template: Clean.Architecture.Solution.Template v9.0.12.

## 📁 Core Structure
```
src/
├── Domain/           # Business entities, value objects, events
├── Application/      # Commands, queries, handlers, DTOs  
├── Infrastructure/   # Database, external services, identity
└── Web/             # API endpoints, configuration
```

## 🔍 Keyword Mapping to Documentation

### Architecture & Patterns
- **Clean Architecture** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Architecture Checklist
- **CQRS** → `docs/cursor-agent/workflows/CURSOR_AI_QUICK_REFERENCE.md` → Implementation Patterns
- **SOLID** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Design Patterns Checklist
- **Domain-Driven Design** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Layer Responsibilities

### Development Workflow
- **New Feature** → `docs/cursor-agent/workflows/IMPLEMENTATION_CHECKLIST.md` → Feature Implementation Checklist
- **Code Generation** → `docs/cursor-agent/workflows/CURSOR_AI_QUICK_REFERENCE.md` → Code Generation Commands
- **Testing** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Testing Rules
- **Code Review** → `docs/cursor-agent/workflows/IMPLEMENTATION_CHECKLIST.md` → Code Review Checklist

### Security & Authentication
- **Authentication** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Security & Authentication Rules
- **Authorization** → `docs/cursor-agent/workflows/CURSOR_AI_QUICK_REFERENCE.md` → Security Rules
- **JWT** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Security & Authentication Rules
- **Azure Key Vault** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Security & Authentication Rules

### Database & Infrastructure
- **Entity Framework** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Database Rules
- **PostgreSQL** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → PostgreSQL Configuration
- **Migrations** → `docs/cursor-agent/workflows/IMPLEMENTATION_CHECKLIST.md` → Database Implementation
- **Azure Bicep** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Deployment Rules

### API Development
- **Endpoints** → `docs/cursor-agent/workflows/CURSOR_AI_QUICK_REFERENCE.md` → Endpoint Pattern
- **Minimal APIs** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Presentation Layer Implementation
- **Swagger** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Code Quality Standards
- **Validation** → `docs/cursor-agent/workflows/CURSOR_AI_QUICK_REFERENCE.md` → Command Pattern

### Code Quality
- **Naming Conventions** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Naming Conventions
- **Code Organization** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Code Quality Standards
- **Performance** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Performance Guidelines
- **Error Handling** → `docs/cursor-agent/workflows/CURSOR_AI_QUICK_REFERENCE.md` → Common Mistakes

### Documentation & Reporting
- **Implementation Reports** → `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` → Cursor Agent Documentation Rules
- **API Documentation** → `docs/api/` → API specifications, guides, examples
- **Architecture Docs** → `docs/architecture/` → ADRs, diagrams, decisions
- **Session Logs** → `docs/cursor-agent/logs/` → Session tracking and audit trails

## 🚀 Quick Commands
```bash
# Build & Run
dotnet build -tl
cd ./src/Web/ && dotnet watch run

# Code Generation
dotnet new ca-usecase --name Create[Entity] --feature-name [FeatureName] --usecase-type command --return-type int
dotnet new ca-usecase -n Get[Entities] -fn [FeatureName] -ut query -rt [Entities]Vm

# Testing
dotnet test

# Azure Deployment
az login && azd up
```

## 📁 Key File Locations
- **Domain Entities**: `src/Domain/Entities/`
- **Application Commands**: `src/Application/[FeatureName]/Commands/`
- **Application Queries**: `src/Application/[FeatureName]/Queries/`
- **API Endpoints**: `src/Web/Endpoints/`
- **Database Context**: `src/Infrastructure/Data/ApplicationDbContext.cs`
- **Infrastructure**: `infra/main.bicep`
- **API Documentation**: `docs/api/`
- **Implementation Reports**: `docs/cursor-agent/reports/`
- **Sample Data**: `scripts/samples/`
- **Cursor Agent Rules**: `docs/cursor-agent/workflows/`

## 🏷️ Naming Patterns
- **Entities**: `{EntityName}.cs`
- **Commands**: `{CommandName}Command.cs`, `{CommandName}CommandHandler.cs`
- **Queries**: `{QueryName}Query.cs`, `{QueryName}QueryHandler.cs`
- **DTOs**: `{EntityName}Dto.cs`, `{EntityName}Vm.cs`
- **Endpoints**: `{EntityName}.cs`
- **Configurations**: `{EntityName}Configuration.cs`
- **Reports**: `{report-type}_{date}.md`
- **Samples**: `{resource-type}_{purpose}_{date}.json`

## 🎯 Common Tasks Quick Guide

### Creating New Entity
1. **Domain**: Create entity in `src/Domain/Entities/`
2. **Application**: Create commands/queries in `src/Application/[FeatureName]/`
3. **Infrastructure**: Add to `ApplicationDbContext` and create configuration
4. **Web**: Create endpoints in `src/Web/Endpoints/`
5. **Samples**: Add sample data in `scripts/samples/resources/`
6. **Documentation**: Create API spec in `docs/api/specifications/`
7. **Report**: Generate implementation report in `docs/cursor-agent/reports/`

### Adding New Endpoint
1. Create endpoint class in `src/Web/Endpoints/`
2. Implement HTTP methods with authorization
3. Add to endpoint group mapping
4. Update OpenAPI documentation
5. Add examples in `docs/api/examples/`

### Database Changes
1. Update entity in Domain layer
2. Create EF Core configuration
3. Generate migration: `dotnet ef migrations add [MigrationName]`
4. Update database: `dotnet ef database update`
5. Update sample data if needed

### Creating Documentation
1. Use proper templates for reports
2. Include metadata (date, agent, session ID, status)
3. Follow exact naming conventions
4. Update documentation index
5. Cross-reference related documents

## 🚨 Common Issues
- **Template Missing**: `dotnet new install Clean.Architecture.Solution.Template::9.0.12`
- **Build Issues**: Check `Directory.Packages.props` for version conflicts
- **Database Connection**: Verify connection string in `appsettings.Development.json`
- **Authentication**: Check JWT configuration and Azure Key Vault
- **Documentation**: Use proper templates and include metadata

## 📚 Reference Documents
- **Navigation Guide**: `docs/DOCUMENTATION_STRUCTURE.md` - AI navigation guide
- **Development Rules**: `docs/cursor-agent/workflows/CURSOR_AI_RULES.md` - Comprehensive development guidelines
- **Quick Reference**: `docs/cursor-agent/workflows/CURSOR_AI_QUICK_REFERENCE.md` - Common patterns and commands
- **Implementation Guide**: `docs/cursor-agent/workflows/IMPLEMENTATION_CHECKLIST.md` - Step-by-step implementation
- **API Documentation**: `docs/api/` - API specifications, guides, examples
- **Cursor Agent Docs**: `docs/cursor-agent/` - Implementation reports, session logs

---

**🎯 Remember**: Always follow Clean Architecture principles, use CQRS pattern, implement proper validation and authorization, and maintain high test coverage. **Document everything** and maintain comprehensive audit trails for all changes. When in doubt, refer to existing implementations in `src/Application/TodoItems/` as reference patterns.
